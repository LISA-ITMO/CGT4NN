import torch.nn as nn
import torch.nn.functional as F

from cgtnnlib.nn.CustomBackwardFunction import CustomBackwardFunction


class AugmentedLinearNetwork(nn.Module):
    """
    Нейросеть с переопределённой функцией распространения ошибки
    для линейных слоёв.
    """

    def __init__(self, inputs_count: int, outputs_count: int, p: float):
        """
        Initializes the AugmentedLinearNetwork.

                Args:
                    inputs_count: The number of input features.
                    outputs_count: The number of output features.
                    p: A parameter used within the network (likely for regularization or a custom operation).

                Returns:
                    None
        """
        super(AugmentedLinearNetwork, self).__init__()

        self.flatten = nn.Flatten()
        self.p = p

        self.fc1 = nn.Linear(inputs_count, 32 * 32)
        self.fc2 = nn.Linear(32 * 32, 32 * 32)
        self.fc3 = nn.Linear(32 * 32, outputs_count)

        self.custom_backward = CustomBackwardFunction.apply

        self.p = p

    @property
    def inputs_count(self):
        """
        Returns the number of outputs.

            Args:
                None

            Returns:
                int: The number of outputs.
        """
        return self.fc1.in_features

    @property
    def outputs_count(self):
        """
        Returns the number of outputs from this layer.

            This property calculates and returns the count of outputs
            produced by the forward pass of the layer.  It relies on internal
            state (likely 'sel' which is not fully shown in the provided code snippet)
            to determine this value.

            Parameters:
                None

            Returns:
                int: The number of outputs generated by the layer.
        """
        return self.fc3.out_features

    def forward(self, x):
        """
        Performs a forward pass through the neural network.

            Args:
                x: The input tensor.

            Returns:
                The output tensor after passing through the layers.
        """
        x = self.flatten(x)
        x = self.custom_backward(self.p, x, self.fc1.weight, self.fc1.bias)
        x = F.relu(x)
        x = self.custom_backward(self.p, x, self.fc2.weight, self.fc2.bias)
        x = F.relu(x)
        x = self.fc3(x)
        return x

    def __str__(self):
        """
        Returns a string representation of the object.

          Args:
            None

          Returns:
            str: A string containing the name, inputs count, and outputs count
                 of the object in the format "Name: {self.name}, inputs_count: {self.inputs_count}, outputs_count: {self.outputs_count}".
        """
        return f"{self.__class__.__name__}(p: {self.p}, inputs_count: {self.inputs_count}, outputs_count: {self.outputs_count})"
